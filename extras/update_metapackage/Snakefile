#############
### Setup ###
#############
"""
Steps:
Create and activate base environment (update_metapackage.yml)
Update config.yaml
Run `snakemake --cores 64 --use-conda --scheduler greedy`
"""

import pandas as pd
import os

configfile: "config.yaml"

hmms_and_names = pd.read_csv("hmms_and_names", sep="\t").set_index("name", drop=False)
singlem_bin = "../../bin/singlem"
output_dir = config["output_dir"]
logs_dir = output_dir + "/logs"
checkm2_output_dirs = config['checkm2_output_dirs'] # In future, when the next version of GTDB after r214 is created, will need to rerun checkm2, probably best done via adding a new rule and getting rid of this variable
taxonomy_database_name = config["taxonomy_database_name"]
taxonomy_database_version = config["taxonomy_database_version"]

print("Finding genomes...")
genome_paths = [os.path.join(d, f) for d, _, fs in os.walk(config["gtdb_protein_faa_reps"]) for f in fs if f.endswith(".faa")]
genomes = ["/".join(g.split("/")[-2:]) for g in genome_paths]

# genomes = genomes[:50]+genomes[(len(genomes)-50):] # debug, so have archaea and bacteria
print("Found {} genomes.".format(len(genomes)))

if not "max_threads" in config: config["max_threads"] = 8

wildcard_constraints:
    genome = "(archaea|bacteria)/\w+.\d+_protein.faa"

rule all:
    input:
        output_dir + "/metapackage/" + config["new_metapackage"],
        # Right now the new singlem won't work with the old metapackage, so only run the new metapackages.
        expand(output_dir + "/sra/{sra}_new.otu_table.tsv", sra=config["sra_seqs_1"]),
        # output_dir + "/sra/done"

####################
### HMM searches ###
####################
rule pfam_search:
    input:
        # config["gtdb_protein_faa_reps"] + "/{genome}"
    output:
        done=output_dir + "/pfam_search.done" #"/hmmsearch/pfam/{genome}.tsv"
    params:
        pfams = config["pfams"],
        genome_ids = genomes,
        output_dir = output_dir,
    threads:
        config["max_threads"]
    log:
        logs_dir + "/pfam_search.log" #"/hmmsearch/pfam/{genome}.log"
    conda:
        "envs/hmm_tools.yml"
    script:
        "scripts/pfam_search.py"

rule tigrfam_search:
    input:
        # config["gtdb_protein_faa_reps"] + "/{genome}"
    output:
        done=output_dir + "/tigrfam_search.done" #output_dir + "/hmmsearch/tigrfam/{genome}.tsv"
    params:
        tigrfams = config["tigrfams"],
        log_dir=logs_dir + "/hmmsearch/tigrfam/",
        output_dir=output_dir + "/hmmsearch/tigrfam/",
        genome_ids = genomes,
    threads:
        config["max_threads"]
    conda:
        "envs/tigrfam_search.yml"
    script:
        "scripts/tigrfam_search.py"

rule get_matches_no_dup:
    input:
        output_dir + "/pfam_search.done",
        output_dir + "/tigrfam_search.done",
    output:
        done=output_dir + "/get_matches_no_dup.done"
    params:
        pfam_search_directory = output_dir + "/hmmsearch/pfam/",
        tigrfam_search_directory = output_dir + "/hmmsearch/tigrfam/",
        hmms_and_names = "hmms_and_names",
        output_dir = output_dir + "/hmmsearch/matches",
        logs_dir = logs_dir + "/hmmsearch/matches",
        genome_ids = genomes,
    threads:
        config["max_threads"]
    conda:
        "envs/get_matches_no_dup.yml"
    script:
        "scripts/get_matches_no_dup_all.py"

rule mfqe:
    input:
        done=output_dir + "/get_matches_no_dup.done",
    params:
        # fasta = config["gtdb_protein_faa_reps"] + "/{genome}",
        # output_tsv = os.path.join(output_dir, f"{genome}.fam") + "/hmmsearch/matches",
        fam_directory = output_dir + "/hmmsearch/matches",
        # seqnames = output_dir + "/hmmsearch/matches/{genome}.tmp"
        output_dir = output_dir + "/hmmsearch/matches",
        logs_dir = logs_dir + "/mfqe",
        genome_ids = genomes,
    output:
        done=output_dir + "/mfqe.done",
    # log:
    #     logs_dir + "/hmmsearch/matches/{genome}_mfqe.log"
    conda:
        "../../singlem.yml"
    threads:
        config["max_threads"]
    script:
        "scripts/mfqe_all.py"

########################
### Package creation ###
########################
rule transpose_hmms_with_sequences:
    input:
        output_dir + "/mfqe.done",
    output:
        done = output_dir + "/transpose_hmms_with_sequences.done",
    params:
        output_dir = directory(output_dir + "/hmmseq/"), # output is file for each spkg
        hmms_and_names = "hmms_and_names",
        matches_dir = output_dir + "/hmmsearch/matches",
        logs_dir = logs_dir + "/transpose_hmms_with_sequences",
        genome_ids = genomes,
    threads:
        config["max_threads"]
    conda:
        "envs/transpose_hmms_with_sequences.yml"
    script:
        "scripts/transpose_hmms_with_sequences_all.py"

rule concatenate_seqs_and_taxonomies:
    input:
        done = output_dir + "/transpose_hmms_with_sequences.done",
    output:
        done = output_dir + "/concatenate_seqs_and_taxonomies.{spkg}.done",
    params:
        hmmseq_dir = output_dir + "/hmmseq/",
        concat_dir = output_dir + "/hmmseq_concat/",
        spkg_seq = output_dir + "/hmmseq_concat/{spkg}.faa",
        spkg_tax = output_dir + "/hmmseq_concat/{spkg}_taxonomy.tsv",
    shell:
        "mkdir -p {params.concat_dir} && find {params.hmmseq_dir} |grep -F {wildcards.spkg} |grep .faa$ |parallel -j1 --ungroup cat {{}} >{params.spkg_seq} && find {params.hmmseq_dir} |grep -F {wildcards.spkg} |grep _taxonomy.tsv$ |parallel -j1 --ungroup cat {{}} >{params.spkg_tax} && touch {output.done}"


rule create_SingleM_packages:
    input:
        output_dir + "/concatenate_seqs_and_taxonomies.{spkg}.done",
    output:
        directory(output_dir + "/packages/{spkg}.spkg")
    params:
        singlem = singlem_bin,
        hmms_and_names = "hmms_and_names",
        uniprot_seq = config["uniprot_seq"],
        uniprot_tax = config["uniprot_tax"],
        spkg = config["metapackage"] + "/{spkg}.spkg",
        spkg_seq = output_dir + "/hmmseq_concat/{spkg}.faa",
        spkg_tax = output_dir + "/hmmseq_concat/{spkg}_taxonomy.tsv",
        spkg_name = lambda wildcards: hmms_and_names.loc[wildcards.spkg, "name_without_number"]
    log:
        logs_dir + "/packages/{spkg}.log"
    conda:
        "../../singlem.yml"
    shell:
        "{params.singlem} regenerate "
        "--input-singlem-package {params.spkg} "
        "--input-sequences {params.spkg_seq} "
        "--input-taxonomy {params.spkg_tax} "
        "--euk-sequences {params.uniprot_seq} "
        "--euk-taxonomy {params.uniprot_tax} "
        "--output-singlem-package {output} "
        "--sequence-prefix {params.spkg_name}~ "
        "&> {log}"

############################
### Metapackage creation ###
############################
rule create_draft_SingleM_metapackage:
    input:
        packages = expand(output_dir + "/packages/{spkg}.spkg", spkg = hmms_and_names.index)
    output:
        directory(output_dir + "/draft_metapackage.smpkg")
    params:
        singlem = singlem_bin
    threads:
        config["max_threads"]
    log:
        logs_dir + "/draft_metapackage.log"
    conda:
        "../../singlem.yml"
    shell:
        "{params.singlem} metapackage "
        "--singlem-packages {input.packages} "
        "--no-nucleotide-sdb "
        "--no-taxon-genome-lengths "
        "--metapackage {output} "
        "--threads {threads} "
        "&> {log}"

rule SingleM_transcripts:
    input:
        dir = config["gtdb_protein_fna_reps"],
        metapackage = output_dir + "/draft_metapackage.smpkg"
    output:
        dir = directory(output_dir + "/transcripts"),
        touch = output_dir + "/transcripts/done"
    threads: 64
    params:
        singlem = singlem_bin,
        logs = logs_dir + "/transcripts"
    conda:
        "../../singlem.yml"
    shell:
        "mkdir -p {params.logs} "
        "&& cat <( find {input.dir} -name '*.fna' ) "
        "| parallel --eta -j {threads} "
        "{params.singlem} pipe "
        "--forward {{}} "
        "--metapackage {input.metapackage} "
        "--otu-table {output.dir}/{{/.}}.otu_table.tsv "
        "--no-assign-taxonomy "
        "'&>' {params.logs}/{{/.}}.log "
        "&& touch {output.touch}"

rule assign_taxonomy:
    input:
        dir = output_dir + "/transcripts",
        touch = output_dir + "/transcripts/done"
    output:
        output_dir + "/taxonomy/transcripts.otu_table.tsv"
    params:
        bac_metadata = config["gtdb_bac_metadata"],
        arc_metadata = config["gtdb_arc_metadata"]
    conda:
        "../../singlem.yml"
    shell:
        "../assign_gtdb_taxonomy_to_gtdb_genomes.py "
        "--otu-table-list <( find {input.dir} -name '*.otu_table.tsv' ) "
        "--gtdb-bac {params.bac_metadata} "
        "--gtdb-arc {params.arc_metadata} "
        "> {output}"

rule make_sdb:
    input:
        output_dir + "/taxonomy/transcripts.otu_table.tsv"
    output:
        directory(output_dir + "/taxonomy/transcripts.sdb")
    threads: 32
    params:
        singlem = singlem_bin
    log:
        logs_dir + "/taxonomy/makedb.log"
    conda:
        "../../singlem.yml"
    shell:
        "{params.singlem} makedb "
        "--otu-table {input} "
        "--db {output} "
        "--threads {threads} "
        "&> {log}"

rule create_SingleM_metapackage:
    input:
        packages = expand(output_dir + "/packages/{spkg}.spkg", spkg = hmms_and_names.index),
        sdb = output_dir + "/taxonomy/transcripts.sdb",
        genome_sizes = output_dir + "/gtdb_mean_genome_sizes.tsv"
    output:
        directory(output_dir + "/metapackage/" + config["new_metapackage"])
    params:
        singlem = singlem_bin
    threads:
        config["max_threads"]
    log:
        logs_dir + "/metapackage.log"
    conda:
        "../../singlem.yml"
    shell:
        "{params.singlem} metapackage "
        "--singlem-packages {input.packages} "
        "--nucleotide-sdb {input.sdb} "
        "--taxon-genome-lengths {input.genome_sizes} "
        "--metapackage {output} "
        "--threads {threads} "
        "--taxonomy-database-name {taxonomy_database_name} "
        "--taxonomy-database-version {taxonomy_database_version} "
        "&> {log}"

#######################################
### Mean genome size table creation ###
#######################################
rule checkm2_gather: # In future presumably this data will be available form the GTDB metadata
    input:
        checkm2_output_dirs = checkm2_output_dirs,
    output:
        gtdb_checkm2_grepped = output_dir + "/gtdb_checkm2_grepped.tsv",
        done = touch(output_dir + "/checkm2_gather.done"),
    log:
        logs_dir + "/checkm2_gather.log"
    shell:
        "grep -hv Completeness {input.checkm2_output_dirs}/*.checkm2/quality_report.tsv > {output.gtdb_checkm2_grepped} 2> {log}"

rule calculate_mean_genome_size:
    input:
        gtdb_checkm2_grepped = output_dir + "/gtdb_checkm2_grepped.tsv",
        done = output_dir + "/checkm2_gather.done",
    output:
        output_dir + "/gtdb_mean_genome_sizes.tsv"
    params:
        gtdb_bac_metadata = config["gtdb_bac_metadata"],
        gtdb_arc_metadata = config["gtdb_arc_metadata"],
    threads: 8
    log:
        logs_dir + "/calculate_mean_genome_size.log"
    conda:
        "envs/calculate_mean_genome_size.yml"
    shell:
        """
        scripts/genome_size_from_gtdb.py --checkm2-grep {input.gtdb_checkm2_grepped} --gtdb-bac-metadata {params.gtdb_bac_metadata} --gtdb-ar-metadata {params.gtdb_arc_metadata} > {output} 2> {log}
        """

###########################
### Metapackage testing ###
###########################
rule test_metapackage:
    input:
        metapackge = output_dir + "/metapackage/" + config["new_metapackage"],
        sra_1 = lambda wildcards: config["sra_seqs_1"][wildcards.sra],
        sra_2 = lambda wildcards: config["sra_seqs_2"][wildcards.sra],
    output:
        table = output_dir + "/sra/{sra}_new.otu_table.tsv",
        archive_table = output_dir + "/sra/{sra}_new.otu_table.json",
        profile = output_dir + "/sra/{sra}_new.otu_table.condensed.tsv",
        profile_krona = output_dir + "/sra/{sra}_new.otu_table.condensed.krona.html"
    params:
        singlem = singlem_bin
    threads:
        8
    log:
        logs_dir + "/sra/{sra}_new_test.log"
    conda:
        "../../singlem.yml"
    shell:
        "{params.singlem} pipe "
        "--forward {input.sra_1} "
        "--reverse {input.sra_2} "
        "--metapackage {input.metapackge} "
        "--otu-table {output.table} "
        "--archive-otu-table {output.archive_table} "
        "-p {output.profile} "
        "--taxonomic-profile-krona {output.profile_krona} "
        "--threads {threads} "
        "&> {log}"

rule test_old_metapackage:
    input:
        sra_1 = lambda wildcards: config["sra_seqs_1"][wildcards.sra],
        sra_2 = lambda wildcards: config["sra_seqs_2"][wildcards.sra],
    output:
        table = output_dir + "/sra/{sra}_old.otu_table.tsv",
        archive_table = output_dir + "/sra/{sra}_old.otu_table.json",
        profile = output_dir + "/sra/{sra}_old.otu_table.condensed.tsv",
        profile_krona = output_dir + "/sra/{sra}_old.otu_table.condensed.krona.html"
    params:
        singlem = singlem_bin,
        metapackge = config["metapackage"],
    threads:
        8
    log:
        logs_dir + "/sra/{sra}_old_test.log"
    conda:
        "../../singlem.yml"
    shell:
        "{params.singlem} pipe "
        "--forward {input.sra_1} "
        "--reverse {input.sra_2} "
        "--metapackage {params.metapackge} "
        "--otu-table {output.table} "
        "--archive-otu-table {output.archive_table} "
        "-p {output.profile} "
        "--taxonomic-profile-krona {output.profile_krona} "
        "--threads {threads} "
        "&> {log}"

rule check_tests:
    input:
        expand(output_dir + "/sra/{sra}_new.otu_table.tsv", sra=config["sra_seqs_1"]),
        expand(output_dir + "/sra/{sra}_old.otu_table.tsv", sra=config["sra_seqs_1"]),
    output:
        output_dir + "/sra/done"
    shell:
        "touch {output}"
